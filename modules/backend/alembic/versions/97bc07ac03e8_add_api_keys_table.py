"""Add API keys table

Revision ID: 97bc07ac03e8
Revises: 073dfdea5ffa
Create Date: 2025-08-15 09:13:54.457877

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '97bc07ac03e8'
down_revision: Union[str, Sequence[str], None] = '073dfdea5ffa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_message_agent'), table_name='agent_messages')
    op.drop_index(op.f('idx_message_conversation_created'), table_name='agent_messages')
    op.drop_index(op.f('idx_message_parent'), table_name='agent_messages')
    op.drop_index(op.f('idx_message_role'), table_name='agent_messages')
    op.drop_index(op.f('idx_message_task'), table_name='agent_messages')
    op.drop_index(op.f('idx_message_thread'), table_name='agent_messages')
    op.drop_index(op.f('idx_message_type'), table_name='agent_messages')
    op.drop_constraint(op.f('agent_messages_conversation_id_fkey'), 'agent_messages', type_='foreignkey')
    op.drop_constraint(op.f('agent_messages_task_id_fkey'), 'agent_messages', type_='foreignkey')
    op.drop_constraint(op.f('agent_messages_agent_id_fkey'), 'agent_messages', type_='foreignkey')
    op.drop_constraint(op.f('agent_messages_parent_message_id_fkey'), 'agent_messages', type_='foreignkey')
    op.create_foreign_key(None, 'agent_messages', 'conversations', ['conversation_id'], ['id'])
    op.drop_column('agent_messages', 'is_edited')
    op.drop_column('agent_messages', 'user_feedback')
    op.drop_column('agent_messages', 'is_helpful')
    op.drop_column('agent_messages', 'task_id')
    op.drop_column('agent_messages', 'attachments')
    op.drop_column('agent_messages', 'target_agent')
    op.drop_column('agent_messages', 'retry_count')
    op.drop_column('agent_messages', 'is_internal')
    op.drop_column('agent_messages', 'thread_id')
    op.drop_column('agent_messages', 'edit_count')
    op.drop_column('agent_messages', 'input_tokens')
    op.drop_column('agent_messages', 'processing_time_ms')
    op.drop_column('agent_messages', 'user_rating')
    op.drop_column('agent_messages', 'model_used')
    op.drop_column('agent_messages', 'provider_used')
    op.drop_column('agent_messages', 'parent_message_id')
    op.drop_column('agent_messages', 'message_metadata')
    op.drop_column('agent_messages', 'total_tokens')
    op.drop_column('agent_messages', 'output_tokens')
    op.drop_column('agent_messages', 'agent_id')
    op.drop_column('agent_messages', 'error_message')
    op.drop_column('agent_messages', 'message_type')
    op.drop_column('agent_messages', 'edited_at')
    op.drop_column('agent_messages', 'updated_at')
    op.drop_column('agent_messages', 'requires_response')
    op.drop_column('agent_messages', 'cost_usd')
    op.alter_column('agents', 'capabilities',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=postgresql.ARRAY(sa.Text()),
               existing_nullable=False)
    op.alter_column('agents', 'fallback_models',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=postgresql.ARRAY(sa.Text()),
               existing_nullable=False)
    op.alter_column('agents', 'specializations',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=postgresql.ARRAY(sa.Text()),
               existing_nullable=False)
    op.alter_column('agents', 'tools_available',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=postgresql.ARRAY(sa.Text()),
               existing_nullable=False)
    op.alter_column('agents', 'file_types_handled',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=postgresql.ARRAY(sa.Text()),
               existing_nullable=False)
    op.alter_column('agents', 'tags',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=postgresql.ARRAY(sa.Text()),
               existing_nullable=False)
    op.drop_index(op.f('idx_agent_active_available'), table_name='agents')
    op.drop_index(op.f('idx_agent_capabilities'), table_name='agents', postgresql_using='gin')
    op.drop_index(op.f('idx_agent_current_load'), table_name='agents')
    op.drop_index(op.f('idx_agent_provider'), table_name='agents')
    op.drop_index(op.f('idx_agent_specializations'), table_name='agents', postgresql_using='gin')
    op.drop_index(op.f('idx_agent_type'), table_name='agents')
    op.add_column('audit_logs', sa.Column('details', sa.Text(), nullable=True))
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_index(op.f('idx_audit_action_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_compliance'), table_name='audit_logs', postgresql_using='gin')
    op.drop_index(op.f('idx_audit_correlation'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_environment'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_ip_address'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_project_action'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_resource'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_risk_score'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_sensitivity'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_session'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_status'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_user_action'), table_name='audit_logs')
    op.drop_constraint(op.f('audit_logs_user_id_fkey'), 'audit_logs', type_='foreignkey')
    op.drop_constraint(op.f('audit_logs_project_id_fkey'), 'audit_logs', type_='foreignkey')
    op.create_foreign_key(None, 'audit_logs', 'users', ['user_id'], ['id'])
    op.drop_column('audit_logs', 'tags')
    op.drop_column('audit_logs', 'user_agent')
    op.drop_column('audit_logs', 'authentication_method')
    op.drop_column('audit_logs', 'additional_data')
    op.drop_column('audit_logs', 'old_values')
    op.drop_column('audit_logs', 'request_id')
    op.drop_column('audit_logs', 'duration_ms')
    op.drop_column('audit_logs', 'compliance_tags')
    op.drop_column('audit_logs', 'service_version')
    op.drop_column('audit_logs', 'data_classification')
    op.drop_column('audit_logs', 'new_values')
    op.drop_column('audit_logs', 'action_timestamp')
    op.drop_column('audit_logs', 'error_message')
    op.drop_column('audit_logs', 'correlation_id')
    op.drop_column('audit_logs', 'action_description')
    op.drop_column('audit_logs', 'status')
    op.drop_column('audit_logs', 'http_method')
    op.drop_column('audit_logs', 'changed_fields')
    op.drop_column('audit_logs', 'referer')
    op.drop_column('audit_logs', 'risk_score')
    op.drop_column('audit_logs', 'session_id')
    op.drop_column('audit_logs', 'project_id')
    op.drop_column('audit_logs', 'ip_address')
    op.drop_column('audit_logs', 'was_authorized')
    op.drop_column('audit_logs', 'permission_level')
    op.drop_column('audit_logs', 'resource_id')
    op.drop_column('audit_logs', 'environment')
    op.drop_column('audit_logs', 'sensitivity_level')
    op.drop_column('audit_logs', 'endpoint')
    op.drop_column('audit_logs', 'resource_type')
    op.drop_column('audit_logs', 'service_name')
    op.drop_column('audit_logs', 'updated_at')
    op.drop_column('audit_logs', 'resource_name')
    op.alter_column('containers', 'container_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_constraint(op.f('containers_container_id_key'), 'containers', type_='unique')
    op.drop_constraint(op.f('containers_container_name_key'), 'containers', type_='unique')
    op.drop_index(op.f('idx_container_created'), table_name='containers')
    op.drop_index(op.f('idx_container_external_port'), table_name='containers')
    op.drop_index(op.f('idx_container_last_active'), table_name='containers')
    op.drop_index(op.f('idx_container_project'), table_name='containers')
    op.drop_index(op.f('idx_container_status'), table_name='containers')
    op.drop_constraint(op.f('containers_project_id_fkey'), 'containers', type_='foreignkey')
    op.create_foreign_key(None, 'containers', 'projects', ['project_id'], ['id'])
    op.drop_column('containers', 'labels')
    op.drop_column('containers', 'ssh_port')
    op.drop_column('containers', 'image')
    op.drop_column('containers', 'error_count')
    op.drop_column('containers', 'workspace_path')
    op.drop_column('containers', 'disk_usage_mb')
    op.drop_column('containers', 'stopped_at')
    op.drop_column('containers', 'registry_url')
    op.drop_column('containers', 'last_active_at')
    op.drop_column('containers', 'build_command')
    op.drop_column('containers', 'deployment_target')
    op.drop_column('containers', 'cpu_usage_percent')
    op.drop_column('containers', 'sleep_at')
    op.drop_column('containers', 'container_metadata')
    op.drop_column('containers', 'health_check_command')
    op.drop_column('containers', 'started_at')
    op.drop_column('containers', 'last_error')
    op.drop_column('containers', 'image_tag')
    op.drop_column('containers', 'start_command')
    op.drop_column('containers', 'logs_url')
    op.drop_column('containers', 'container_name')
    op.drop_column('containers', 'auto_sleep_minutes')
    op.drop_column('containers', 'restart_count')
    op.drop_column('containers', 'environment_vars')
    op.drop_column('containers', 'is_public')
    op.drop_column('containers', 'auto_delete_days')
    op.drop_column('containers', 'network_out_mb')
    op.drop_column('containers', 'last_health_check')
    op.drop_column('containers', 'preview_url')
    op.drop_column('containers', 'memory_limit')
    op.drop_column('containers', 'install_command')
    op.drop_column('containers', 'internal_port')
    op.drop_column('containers', 'cpu_limit')
    op.drop_column('containers', 'disk_limit')
    op.drop_column('containers', 'volumes')
    op.drop_column('containers', 'swap_limit')
    op.drop_column('containers', 'auto_stop_hours')
    op.drop_column('containers', 'startup_time_seconds')
    op.drop_column('containers', 'access_token')
    op.drop_column('containers', 'allowed_users')
    op.drop_column('containers', 'updated_at')
    op.drop_column('containers', 'external_port')
    op.drop_column('containers', 'network_in_mb')
    op.drop_column('containers', 'health_check_failures')
    op.drop_column('containers', 'memory_usage_mb')
    op.add_column('conversations', sa.Column('user_message', sa.Text(), nullable=True))
    op.add_column('conversations', sa.Column('agent_response', sa.Text(), nullable=True))
    op.drop_index(op.f('idx_conversation_active'), table_name='conversations')
    op.drop_index(op.f('idx_conversation_agent'), table_name='conversations')
    op.drop_index(op.f('idx_conversation_created'), table_name='conversations')
    op.drop_index(op.f('idx_conversation_last_message'), table_name='conversations')
    op.drop_index(op.f('idx_conversation_project_user'), table_name='conversations')
    op.drop_constraint(op.f('conversations_agent_id_fkey'), 'conversations', type_='foreignkey')
    op.drop_constraint(op.f('conversations_project_id_fkey'), 'conversations', type_='foreignkey')
    op.drop_constraint(op.f('conversations_user_id_fkey'), 'conversations', type_='foreignkey')
    op.create_foreign_key(None, 'conversations', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'conversations', 'projects', ['project_id'], ['id'])
    op.create_foreign_key(None, 'conversations', 'agents', ['agent_id'], ['id'])
    op.drop_column('conversations', 'tags')
    op.drop_column('conversations', 'conversation_metadata')
    op.drop_column('conversations', 'is_archived')
    op.drop_column('conversations', 'archived_at')
    op.drop_column('conversations', 'auto_summarize')
    op.drop_column('conversations', 'user_message_count')
    op.drop_column('conversations', 'summary')
    op.drop_column('conversations', 'is_pinned')
    op.drop_column('conversations', 'archive_reason')
    op.drop_column('conversations', 'message_count')
    op.drop_column('conversations', 'system_context')
    op.drop_column('conversations', 'agent_message_count')
    op.drop_column('conversations', 'summary_updated_at')
    op.drop_column('conversations', 'total_cost_usd')
    op.drop_column('conversations', 'title')
    op.drop_column('conversations', 'context')
    op.drop_column('conversations', 'total_tokens_used')
    op.drop_column('conversations', 'is_active')
    op.drop_column('conversations', 'updated_at')
    op.drop_column('conversations', 'last_message_at')
    op.add_column('cost_tracking', sa.Column('cost', sa.Float(), nullable=False))
    op.drop_index(op.f('idx_cost_agent_period'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_billing_period'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_project_period'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_project_timestamp'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_provider_model'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_request_timestamp'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_request_type'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_status'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_total_cost'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_user_period'), table_name='cost_tracking')
    op.drop_index(op.f('idx_cost_user_timestamp'), table_name='cost_tracking')
    op.drop_constraint(op.f('cost_tracking_user_id_fkey'), 'cost_tracking', type_='foreignkey')
    op.drop_constraint(op.f('cost_tracking_agent_id_fkey'), 'cost_tracking', type_='foreignkey')
    op.drop_constraint(op.f('cost_tracking_conversation_id_fkey'), 'cost_tracking', type_='foreignkey')
    op.drop_constraint(op.f('cost_tracking_project_id_fkey'), 'cost_tracking', type_='foreignkey')
    op.drop_constraint(op.f('cost_tracking_task_id_fkey'), 'cost_tracking', type_='foreignkey')
    op.create_foreign_key(None, 'cost_tracking', 'users', ['user_id'], ['id'])
    op.drop_column('cost_tracking', 'task_id')
    op.drop_column('cost_tracking', 'response_length')
    op.drop_column('cost_tracking', 'output_cost_usd')
    op.drop_column('cost_tracking', 'request_id')
    op.drop_column('cost_tracking', 'context_efficiency')
    op.drop_column('cost_tracking', 'total_tokens')
    op.drop_column('cost_tracking', 'output_tokens')
    op.drop_column('cost_tracking', 'conversation_id')
    op.drop_column('cost_tracking', 'user_satisfaction')
    op.drop_column('cost_tracking', 'error_message')
    op.drop_column('cost_tracking', 'quality_score')
    op.drop_column('cost_tracking', 'input_cost_usd')
    op.drop_column('cost_tracking', 'response_time_ms')
    op.drop_column('cost_tracking', 'billing_cycle_start')
    op.drop_column('cost_tracking', 'status')
    op.drop_column('cost_tracking', 'retry_count')
    op.drop_column('cost_tracking', 'context_window_used')
    op.drop_column('cost_tracking', 'request_type')
    op.drop_column('cost_tracking', 'model_provider')
    op.drop_column('cost_tracking', 'total_cost_usd')
    op.drop_column('cost_tracking', 'input_tokens')
    op.drop_column('cost_tracking', 'project_id')
    op.drop_column('cost_tracking', 'output_price_per_1k_tokens')
    op.drop_column('cost_tracking', 'was_helpful')
    op.drop_column('cost_tracking', 'pricing_metadata')
    op.drop_column('cost_tracking', 'request_timestamp')
    op.drop_column('cost_tracking', 'latency_ms')
    op.drop_column('cost_tracking', 'input_price_per_1k_tokens')
    op.drop_column('cost_tracking', 'billing_cycle_end')
    op.drop_column('cost_tracking', 'model_version')
    op.drop_column('cost_tracking', 'throughput_tokens_per_second')
    op.drop_column('cost_tracking', 'agent_id')
    op.drop_column('cost_tracking', 'billing_period')
    op.drop_column('cost_tracking', 'request_metadata')
    op.drop_column('cost_tracking', 'request_purpose')
    op.drop_column('cost_tracking', 'updated_at')
    op.drop_column('cost_tracking', 'model_name')
    op.drop_column('cost_tracking', 'prompt_length')
    op.add_column('git_branches', sa.Column('name', sa.String(length=255), nullable=False))
    op.drop_index(op.f('idx_branch_active'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_agent'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_created'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_last_activity'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_merged'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_name'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_priority'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_project'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_project_agent'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_project_name'), table_name='git_branches')
    op.drop_index(op.f('idx_branch_task'), table_name='git_branches')
    op.drop_constraint(op.f('git_branches_merged_by_fkey'), 'git_branches', type_='foreignkey')
    op.drop_constraint(op.f('git_branches_assigned_agent_id_fkey'), 'git_branches', type_='foreignkey')
    op.drop_constraint(op.f('git_branches_project_id_fkey'), 'git_branches', type_='foreignkey')
    op.drop_constraint(op.f('git_branches_created_by_fkey'), 'git_branches', type_='foreignkey')
    op.drop_constraint(op.f('git_branches_task_id_fkey'), 'git_branches', type_='foreignkey')
    op.create_foreign_key(None, 'git_branches', 'projects', ['project_id'], ['id'])
    op.drop_column('git_branches', 'tags')
    op.drop_column('git_branches', 'task_id')
    op.drop_column('git_branches', 'approvals')
    op.drop_column('git_branches', 'created_by')
    op.drop_column('git_branches', 'last_activity_at')
    op.drop_column('git_branches', 'display_name')
    op.drop_column('git_branches', 'merged_by')
    op.drop_column('git_branches', 'is_merged')
    op.drop_column('git_branches', 'commit_hash')
    op.drop_column('git_branches', 'lines_added')
    op.drop_column('git_branches', 'lines_removed')
    op.drop_column('git_branches', 'has_conflicts')
    op.drop_column('git_branches', 'stale_after_days')
    op.drop_column('git_branches', 'branch_name')
    op.drop_column('git_branches', 'conflict_resolution')
    op.drop_column('git_branches', 'test_status')
    op.drop_column('git_branches', 'reviewers')
    op.drop_column('git_branches', 'description')
    op.drop_column('git_branches', 'merged_at')
    op.drop_column('git_branches', 'build_status')
    op.drop_column('git_branches', 'auto_delete_after_merge')
    op.drop_column('git_branches', 'branch_metadata')
    op.drop_column('git_branches', 'commits_count')
    op.drop_column('git_branches', 'is_protected')
    op.drop_column('git_branches', 'is_deleted')
    op.drop_column('git_branches', 'files_changed')
    op.drop_column('git_branches', 'priority')
    op.drop_column('git_branches', 'development_time_hours')
    op.drop_column('git_branches', 'parent_branch')
    op.drop_column('git_branches', 'merge_target')
    op.drop_column('git_branches', 'agent_type')
    op.drop_column('git_branches', 'last_commit_at')
    op.drop_column('git_branches', 'review_comments')
    op.drop_column('git_branches', 'merge_commit_hash')
    op.drop_column('git_branches', 'assigned_agent_id')
    op.drop_column('git_branches', 'merge_time_minutes')
    op.drop_column('git_branches', 'is_active')
    op.drop_column('git_branches', 'code_quality_score')
    op.drop_column('git_branches', 'updated_at')
    op.drop_column('git_branches', 'conflict_files')
    op.alter_column('project_collaborators', 'project_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('project_collaborators', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('project_collaborators', 'role',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('project_collaborators', 'added_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(op.f('uq_project_user_collaborator'), 'project_collaborators', type_='unique')
    op.drop_constraint(op.f('project_collaborators_user_id_fkey'), 'project_collaborators', type_='foreignkey')
    op.drop_constraint(op.f('project_collaborators_added_by_id_fkey'), 'project_collaborators', type_='foreignkey')
    op.drop_constraint(op.f('project_collaborators_project_id_fkey'), 'project_collaborators', type_='foreignkey')
    op.create_foreign_key(None, 'project_collaborators', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'project_collaborators', 'projects', ['project_id'], ['id'])
    op.drop_column('project_collaborators', 'added_by_id')
    op.add_column('project_files', sa.Column('path', sa.String(length=1000), nullable=False))
    op.add_column('project_files', sa.Column('size', sa.Integer(), nullable=False))
    op.drop_index(op.f('idx_file_complexity'), table_name='project_files')
    op.drop_index(op.f('idx_file_created'), table_name='project_files')
    op.drop_index(op.f('idx_file_deleted'), table_name='project_files')
    op.drop_index(op.f('idx_file_git_status'), table_name='project_files')
    op.drop_index(op.f('idx_file_hash'), table_name='project_files')
    op.drop_index(op.f('idx_file_latest'), table_name='project_files')
    op.drop_index(op.f('idx_file_modified'), table_name='project_files')
    op.drop_index(op.f('idx_file_path'), table_name='project_files')
    op.drop_index(op.f('idx_file_project'), table_name='project_files')
    op.drop_index(op.f('idx_file_project_path'), table_name='project_files')
    op.drop_index(op.f('idx_file_project_type'), table_name='project_files')
    op.drop_index(op.f('idx_file_type'), table_name='project_files')
    op.drop_constraint(op.f('project_files_parent_version_id_fkey'), 'project_files', type_='foreignkey')
    op.drop_constraint(op.f('project_files_created_by_fkey'), 'project_files', type_='foreignkey')
    op.drop_constraint(op.f('project_files_project_id_fkey'), 'project_files', type_='foreignkey')
    op.drop_constraint(op.f('project_files_updated_by_fkey'), 'project_files', type_='foreignkey')
    op.create_foreign_key(None, 'project_files', 'projects', ['project_id'], ['id'])
    op.drop_column('project_files', 'tags')
    op.drop_column('project_files', 'git_status')
    op.drop_column('project_files', 'created_by')
    op.drop_column('project_files', 'file_path')
    op.drop_column('project_files', 'code_line_count')
    op.drop_column('project_files', 'is_ignored')
    op.drop_column('project_files', 'parent_version_id')
    op.drop_column('project_files', 'functions')
    op.drop_column('project_files', 'line_count')
    op.drop_column('project_files', 'file_type')
    op.drop_column('project_files', 'branch_name')
    op.drop_column('project_files', 'is_generated')
    op.drop_column('project_files', 'content_hash')
    op.drop_column('project_files', 'is_latest')
    op.drop_column('project_files', 'updated_by')
    op.drop_column('project_files', 'ai_analysis_result')
    op.drop_column('project_files', 'file_metadata')
    op.drop_column('project_files', 'blank_line_count')
    op.drop_column('project_files', 'is_public')
    op.drop_column('project_files', 'content')
    op.drop_column('project_files', 'is_deleted')
    op.drop_column('project_files', 'last_modified_at')
    op.drop_column('project_files', 'syntax_errors')
    op.drop_column('project_files', 'git_hash')
    op.drop_column('project_files', 'classes')
    op.drop_column('project_files', 'imports')
    op.drop_column('project_files', 'edit_count')
    op.drop_column('project_files', 'file_extension')
    op.drop_column('project_files', 'comment_line_count')
    op.drop_column('project_files', 'ai_analyzed')
    op.drop_column('project_files', 'file_size')
    op.drop_column('project_files', 'contains_secrets')
    op.drop_column('project_files', 'is_binary')
    op.drop_column('project_files', 'is_readonly')
    op.drop_column('project_files', 'language_detected')
    op.drop_column('project_files', 'last_accessed_at')
    op.drop_column('project_files', 'version')
    op.drop_column('project_files', 'security_issues')
    op.drop_column('project_files', 'exports')
    op.drop_column('project_files', 'is_hidden')
    op.drop_column('project_files', 'allowed_users')
    op.drop_column('project_files', 'file_name')
    op.drop_column('project_files', 'updated_at')
    op.drop_column('project_files', 'open_count')
    op.drop_column('project_files', 'complexity_score')
    op.drop_column('project_files', 'encoding')
    op.drop_index(op.f('idx_template_active'), table_name='project_templates')
    op.drop_index(op.f('idx_template_category'), table_name='project_templates')
    op.drop_index(op.f('idx_template_created'), table_name='project_templates')
    op.drop_index(op.f('idx_template_difficulty'), table_name='project_templates')
    op.drop_index(op.f('idx_template_featured'), table_name='project_templates')
    op.drop_index(op.f('idx_template_features'), table_name='project_templates', postgresql_using='gin')
    op.drop_index(op.f('idx_template_framework'), table_name='project_templates')
    op.drop_index(op.f('idx_template_language'), table_name='project_templates')
    op.drop_index(op.f('idx_template_rating'), table_name='project_templates')
    op.drop_index(op.f('idx_template_tags'), table_name='project_templates', postgresql_using='gin')
    op.drop_index(op.f('idx_template_updated'), table_name='project_templates')
    op.drop_index(op.f('idx_template_usage'), table_name='project_templates')
    op.drop_constraint(op.f('project_templates_name_key'), 'project_templates', type_='unique')
    op.drop_constraint(op.f('project_templates_created_by_fkey'), 'project_templates', type_='foreignkey')
    op.drop_column('project_templates', 'tags')
    op.drop_column('project_templates', 'lighthouse_score')
    op.drop_column('project_templates', 'template_type')
    op.drop_column('project_templates', 'file_structure')
    op.drop_column('project_templates', 'features')
    op.drop_column('project_templates', 'created_by')
    op.drop_column('project_templates', 'dependencies')
    op.drop_column('project_templates', 'template_metadata')
    op.drop_column('project_templates', 'display_name')
    op.drop_column('project_templates', 'dev_dependencies')
    op.drop_column('project_templates', 'build_command')
    op.drop_column('project_templates', 'docker_image')
    op.drop_column('project_templates', 'ai_optimized')
    op.drop_column('project_templates', 'test_command')
    op.drop_column('project_templates', 'container_config')
    op.drop_column('project_templates', 'usage_count')
    op.drop_column('project_templates', 'load_time_ms')
    op.drop_column('project_templates', 'template_version')
    op.drop_column('project_templates', 'category')
    op.drop_column('project_templates', 'difficulty_level')
    op.drop_column('project_templates', 'start_command')
    op.drop_column('project_templates', 'included_libraries')
    op.drop_column('project_templates', 'is_deprecated')
    op.drop_column('project_templates', 'documentation_url')
    op.drop_column('project_templates', 'framework')
    op.drop_column('project_templates', 'changelog')
    op.drop_column('project_templates', 'starter_files')
    op.drop_column('project_templates', 'environment_vars')
    op.drop_column('project_templates', 'rating_count')
    op.drop_column('project_templates', 'average_setup_time_minutes')
    op.drop_column('project_templates', 'cpu_requirements')
    op.drop_column('project_templates', 'tutorial_url')
    op.drop_column('project_templates', 'subcategory')
    op.drop_column('project_templates', 'user_rating')
    op.drop_column('project_templates', 'memory_requirements')
    op.drop_column('project_templates', 'install_command')
    op.drop_column('project_templates', 'estimated_setup_time')
    op.drop_column('project_templates', 'github_url')
    op.drop_column('project_templates', 'version')
    op.drop_column('project_templates', 'language')
    op.drop_column('project_templates', 'recommended_agents')
    op.drop_column('project_templates', 'last_updated')
    op.drop_column('project_templates', 'agent_configurations')
    op.drop_column('project_templates', 'is_official')
    op.drop_column('project_templates', 'demo_url')
    op.drop_column('project_templates', 'framework_config')
    op.drop_column('project_templates', 'is_active')
    op.drop_column('project_templates', 'is_featured')
    op.drop_column('project_templates', 'prerequisites')
    op.drop_column('project_templates', 'bundle_size_kb')
    op.drop_column('project_templates', 'updated_at')
    op.drop_column('project_templates', 'success_rate')
    op.add_column('projects', sa.Column('repository_url', sa.String(length=500), nullable=True))
    op.add_column('projects', sa.Column('branch', sa.String(length=100), nullable=False))
    op.add_column('projects', sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('projects', sa.Column('environment_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('projects', sa.Column('is_archived', sa.Boolean(), nullable=False))
    op.add_column('projects', sa.Column('max_containers', sa.String(length=50), nullable=False))
    op.add_column('projects', sa.Column('max_storage_mb', sa.String(length=50), nullable=False))
    op.add_column('projects', sa.Column('max_compute_hours', sa.String(length=50), nullable=False))
    op.add_column('projects', sa.Column('current_containers', sa.String(length=50), nullable=False))
    op.add_column('projects', sa.Column('current_storage_mb', sa.String(length=50), nullable=False))
    op.add_column('projects', sa.Column('current_compute_hours', sa.String(length=50), nullable=False))
    op.add_column('projects', sa.Column('readme_content', sa.Text(), nullable=True))
    op.add_column('projects', sa.Column('last_activity_at', sa.DateTime(), nullable=False))
    op.drop_index(op.f('idx_project_container'), table_name='projects')
    op.drop_index(op.f('idx_project_created'), table_name='projects')
    op.drop_index(op.f('idx_project_last_accessed'), table_name='projects')
    op.drop_index(op.f('idx_project_name'), table_name='projects')
    op.drop_index(op.f('idx_project_owner_status'), table_name='projects')
    op.drop_index(op.f('idx_project_public'), table_name='projects')
    op.drop_index(op.f('idx_project_template_type'), table_name='projects')
    op.drop_constraint(op.f('projects_container_id_key'), 'projects', type_='unique')
    op.create_index(op.f('ix_projects_created_at'), 'projects', ['created_at'], unique=False)
    op.create_index(op.f('ix_projects_is_archived'), 'projects', ['is_archived'], unique=False)
    op.create_index(op.f('ix_projects_last_activity_at'), 'projects', ['last_activity_at'], unique=False)
    op.create_index(op.f('ix_projects_name'), 'projects', ['name'], unique=False)
    op.create_index(op.f('ix_projects_owner_id'), 'projects', ['owner_id'], unique=False)
    op.create_index(op.f('ix_projects_status'), 'projects', ['status'], unique=False)
    op.drop_constraint(op.f('projects_owner_id_fkey'), 'projects', type_='foreignkey')
    op.drop_constraint(op.f('projects_archived_by_id_fkey'), 'projects', type_='foreignkey')
    op.create_foreign_key(None, 'projects', 'users', ['owner_id'], ['id'])
    op.drop_column('projects', 'template_type')
    op.drop_column('projects', 'total_deployments')
    op.drop_column('projects', 'dependencies')
    op.drop_column('projects', 'auto_deploy')
    op.drop_column('projects', 'archived_at')
    op.drop_column('projects', 'build_command')
    op.drop_column('projects', 'git_provider')
    op.drop_column('projects', 'last_deployed')
    op.drop_column('projects', 'container_id')
    op.drop_column('projects', 'git_repo_url')
    op.drop_column('projects', 'deployment_url')
    op.drop_column('projects', 'start_command')
    op.drop_column('projects', 'last_accessed')
    op.drop_column('projects', 'archive_reason')
    op.drop_column('projects', 'environment_vars')
    op.drop_column('projects', 'project_metadata')
    op.drop_column('projects', 'preview_url')
    op.drop_column('projects', 'archived_by_id')
    op.drop_column('projects', 'ai_generated_lines')
    op.drop_column('projects', 'total_lines_of_code')
    op.drop_column('projects', 'memory_limit')
    op.drop_column('projects', 'install_command')
    op.drop_column('projects', 'cpu_limit')
    op.drop_column('projects', 'storage_limit')
    op.drop_column('projects', 'framework_config')
    op.drop_column('projects', 'is_template')
    op.drop_column('projects', 'auto_commit')
    op.drop_column('projects', 'total_builds')
    op.drop_column('projects', 'default_branch')
    op.drop_column('projects', 'file_count')
    op.alter_column('scheduled_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('tasks', 'title',
               existing_type=sa.VARCHAR(length=500),
               nullable=True)
    op.alter_column('tasks', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('tasks', 'task_type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.drop_index(op.f('idx_task_assigned_agents'), table_name='tasks', postgresql_using='gin')
    op.drop_index(op.f('idx_task_created'), table_name='tasks')
    op.drop_index(op.f('idx_task_parent'), table_name='tasks')
    op.drop_index(op.f('idx_task_priority_status'), table_name='tasks')
    op.drop_index(op.f('idx_task_project_status'), table_name='tasks')
    op.drop_index(op.f('idx_task_type_complexity'), table_name='tasks')
    op.drop_index(op.f('idx_task_user'), table_name='tasks')
    op.drop_constraint(op.f('tasks_parent_task_id_fkey'), 'tasks', type_='foreignkey')
    op.drop_constraint(op.f('tasks_approved_by_id_fkey'), 'tasks', type_='foreignkey')
    op.drop_constraint(op.f('tasks_user_id_fkey'), 'tasks', type_='foreignkey')
    op.drop_constraint(op.f('tasks_project_id_fkey'), 'tasks', type_='foreignkey')
    op.create_foreign_key(None, 'tasks', 'projects', ['project_id'], ['id'])
    op.drop_column('tasks', 'tags')
    op.drop_column('tasks', 'dependencies')
    op.drop_column('tasks', 'total_steps')
    op.drop_column('tasks', 'human_feedback')
    op.drop_column('tasks', 'primary_agent')
    op.drop_column('tasks', 'parent_task_id')
    op.drop_column('tasks', 'technical_specs')
    op.drop_column('tasks', 'generated_files')
    op.drop_column('tasks', 'current_step')
    op.drop_column('tasks', 'estimated_cost_usd')
    op.drop_column('tasks', 'execution_time_seconds')
    op.drop_column('tasks', 'actual_cost_usd')
    op.drop_column('tasks', 'started_at')
    op.drop_column('tasks', 'error_message')
    op.drop_column('tasks', 'quality_score')
    op.drop_column('tasks', 'is_approved')
    op.drop_column('tasks', 'max_retries')
    op.drop_column('tasks', 'completed_at')
    op.drop_column('tasks', 'retry_count')
    op.drop_column('tasks', 'requires_human_review')
    op.drop_column('tasks', 'tokens_used')
    op.drop_column('tasks', 'estimated_duration_minutes')
    op.drop_column('tasks', 'complexity')
    op.drop_column('tasks', 'results')
    op.drop_column('tasks', 'context')
    op.drop_column('tasks', 'assigned_agents')
    op.drop_column('tasks', 'requirements')
    op.drop_column('tasks', 'user_id')
    op.drop_column('tasks', 'git_commits')
    op.drop_column('tasks', 'approved_by_id')
    op.drop_column('tasks', 'external_references')
    op.drop_column('tasks', 'task_metadata')
    op.drop_column('tasks', 'last_error_at')
    op.drop_column('tasks', 'approved_at')
    op.drop_column('tasks', 'acceptance_criteria')
    op.drop_column('tasks', 'modified_files')
    op.drop_column('tasks', 'progress_percentage')
    op.drop_index(op.f('idx_user_created'), table_name='users')
    op.drop_index(op.f('idx_user_email_active'), table_name='users')
    op.drop_index(op.f('idx_user_role'), table_name='users')
    op.drop_index(op.f('idx_user_username_active'), table_name='users')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_username_active'), 'users', ['username', 'is_active'], unique=False)
    op.create_index(op.f('idx_user_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('idx_user_email_active'), 'users', ['email', 'is_active'], unique=False)
    op.create_index(op.f('idx_user_created'), 'users', ['created_at'], unique=False)
    op.add_column('tasks', sa.Column('progress_percentage', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('modified_files', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('acceptance_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('last_error_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('task_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('external_references', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('approved_by_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('git_commits', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('assigned_agents', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('complexity', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('requires_human_review', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('is_approved', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('actual_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('execution_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('estimated_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('current_step', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('generated_files', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('technical_specs', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('parent_task_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('primary_agent', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('human_feedback', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('total_steps', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('dependencies', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.create_foreign_key(op.f('tasks_project_id_fkey'), 'tasks', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('tasks_user_id_fkey'), 'tasks', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('tasks_approved_by_id_fkey'), 'tasks', 'users', ['approved_by_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('tasks_parent_task_id_fkey'), 'tasks', 'tasks', ['parent_task_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_task_user'), 'tasks', ['user_id'], unique=False)
    op.create_index(op.f('idx_task_type_complexity'), 'tasks', ['task_type', 'complexity'], unique=False)
    op.create_index(op.f('idx_task_project_status'), 'tasks', ['project_id', 'status'], unique=False)
    op.create_index(op.f('idx_task_priority_status'), 'tasks', ['priority', 'status'], unique=False)
    op.create_index(op.f('idx_task_parent'), 'tasks', ['parent_task_id'], unique=False)
    op.create_index(op.f('idx_task_created'), 'tasks', ['created_at'], unique=False)
    op.create_index(op.f('idx_task_assigned_agents'), 'tasks', ['assigned_agents'], unique=False, postgresql_using='gin')
    op.alter_column('tasks', 'task_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('tasks', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('tasks', 'title',
               existing_type=sa.VARCHAR(length=500),
               nullable=False)
    op.alter_column('scheduled_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.add_column('projects', sa.Column('file_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('default_branch', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('total_builds', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('auto_commit', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('is_template', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('framework_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('storage_limit', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('cpu_limit', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('install_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('memory_limit', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('total_lines_of_code', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('ai_generated_lines', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('archived_by_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('preview_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('project_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('environment_vars', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('archive_reason', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('last_accessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('start_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('deployment_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('git_repo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('container_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('last_deployed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('git_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('build_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('projects', sa.Column('auto_deploy', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('total_deployments', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('projects', sa.Column('template_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'projects', type_='foreignkey')
    op.create_foreign_key(op.f('projects_archived_by_id_fkey'), 'projects', 'users', ['archived_by_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('projects_owner_id_fkey'), 'projects', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_projects_status'), table_name='projects')
    op.drop_index(op.f('ix_projects_owner_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_index(op.f('ix_projects_last_activity_at'), table_name='projects')
    op.drop_index(op.f('ix_projects_is_archived'), table_name='projects')
    op.drop_index(op.f('ix_projects_created_at'), table_name='projects')
    op.create_unique_constraint(op.f('projects_container_id_key'), 'projects', ['container_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_project_template_type'), 'projects', ['template_type'], unique=False)
    op.create_index(op.f('idx_project_public'), 'projects', ['is_public'], unique=False)
    op.create_index(op.f('idx_project_owner_status'), 'projects', ['owner_id', 'status'], unique=False)
    op.create_index(op.f('idx_project_name'), 'projects', ['name'], unique=False)
    op.create_index(op.f('idx_project_last_accessed'), 'projects', ['last_accessed'], unique=False)
    op.create_index(op.f('idx_project_created'), 'projects', ['created_at'], unique=False)
    op.create_index(op.f('idx_project_container'), 'projects', ['container_id'], unique=False)
    op.drop_column('projects', 'last_activity_at')
    op.drop_column('projects', 'readme_content')
    op.drop_column('projects', 'current_compute_hours')
    op.drop_column('projects', 'current_storage_mb')
    op.drop_column('projects', 'current_containers')
    op.drop_column('projects', 'max_compute_hours')
    op.drop_column('projects', 'max_storage_mb')
    op.drop_column('projects', 'max_containers')
    op.drop_column('projects', 'is_archived')
    op.drop_column('projects', 'environment_variables')
    op.drop_column('projects', 'settings')
    op.drop_column('projects', 'branch')
    op.drop_column('projects', 'repository_url')
    op.add_column('project_templates', sa.Column('success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('bundle_size_kb', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('prerequisites', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('framework_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('demo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('is_official', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('agent_configurations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('recommended_agents', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('language', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('github_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('estimated_setup_time', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('install_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('memory_requirements', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('user_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('subcategory', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('tutorial_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('cpu_requirements', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('average_setup_time_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('environment_vars', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('starter_files', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('changelog', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('framework', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('documentation_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('is_deprecated', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('included_libraries', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('start_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('difficulty_level', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('template_version', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('load_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('container_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('test_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('ai_optimized', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('docker_image', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('build_command', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('dev_dependencies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('template_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('features', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('file_structure', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('template_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('project_templates', sa.Column('lighthouse_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('project_templates', sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('project_templates_created_by_fkey'), 'project_templates', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_unique_constraint(op.f('project_templates_name_key'), 'project_templates', ['name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_template_usage'), 'project_templates', ['usage_count'], unique=False)
    op.create_index(op.f('idx_template_updated'), 'project_templates', ['last_updated'], unique=False)
    op.create_index(op.f('idx_template_tags'), 'project_templates', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_template_rating'), 'project_templates', ['user_rating'], unique=False)
    op.create_index(op.f('idx_template_language'), 'project_templates', ['language'], unique=False)
    op.create_index(op.f('idx_template_framework'), 'project_templates', ['framework'], unique=False)
    op.create_index(op.f('idx_template_features'), 'project_templates', ['features'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_template_featured'), 'project_templates', ['is_featured'], unique=False)
    op.create_index(op.f('idx_template_difficulty'), 'project_templates', ['difficulty_level'], unique=False)
    op.create_index(op.f('idx_template_created'), 'project_templates', ['created_at'], unique=False)
    op.create_index(op.f('idx_template_category'), 'project_templates', ['category'], unique=False)
    op.create_index(op.f('idx_template_active'), 'project_templates', ['is_active'], unique=False)
    op.add_column('project_files', sa.Column('encoding', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('complexity_score', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('open_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('allowed_users', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('is_hidden', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('exports', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('security_issues', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('last_accessed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('language_detected', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('is_readonly', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('is_binary', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('contains_secrets', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('ai_analyzed', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('comment_line_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('file_extension', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('edit_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('imports', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('classes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('git_hash', sa.VARCHAR(length=40), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('syntax_errors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('last_modified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('blank_line_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('file_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('ai_analysis_result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('is_latest', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('content_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('is_generated', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('branch_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('line_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('functions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('parent_version_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('is_ignored', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('code_line_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('file_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=False))
    op.add_column('project_files', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('git_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('project_files', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'project_files', type_='foreignkey')
    op.create_foreign_key(op.f('project_files_updated_by_fkey'), 'project_files', 'users', ['updated_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('project_files_project_id_fkey'), 'project_files', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('project_files_created_by_fkey'), 'project_files', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('project_files_parent_version_id_fkey'), 'project_files', 'project_files', ['parent_version_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_file_type'), 'project_files', ['file_type'], unique=False)
    op.create_index(op.f('idx_file_project_type'), 'project_files', ['project_id', 'file_type'], unique=False)
    op.create_index(op.f('idx_file_project_path'), 'project_files', ['project_id', 'file_path'], unique=False)
    op.create_index(op.f('idx_file_project'), 'project_files', ['project_id'], unique=False)
    op.create_index(op.f('idx_file_path'), 'project_files', ['file_path'], unique=False)
    op.create_index(op.f('idx_file_modified'), 'project_files', ['last_modified_at'], unique=False)
    op.create_index(op.f('idx_file_latest'), 'project_files', ['is_latest'], unique=False)
    op.create_index(op.f('idx_file_hash'), 'project_files', ['content_hash'], unique=False)
    op.create_index(op.f('idx_file_git_status'), 'project_files', ['git_status'], unique=False)
    op.create_index(op.f('idx_file_deleted'), 'project_files', ['is_deleted'], unique=False)
    op.create_index(op.f('idx_file_created'), 'project_files', ['created_at'], unique=False)
    op.create_index(op.f('idx_file_complexity'), 'project_files', ['complexity_score'], unique=False)
    op.drop_column('project_files', 'size')
    op.drop_column('project_files', 'path')
    op.add_column('project_collaborators', sa.Column('added_by_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'project_collaborators', type_='foreignkey')
    op.drop_constraint(None, 'project_collaborators', type_='foreignkey')
    op.create_foreign_key(op.f('project_collaborators_project_id_fkey'), 'project_collaborators', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('project_collaborators_added_by_id_fkey'), 'project_collaborators', 'users', ['added_by_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('project_collaborators_user_id_fkey'), 'project_collaborators', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('uq_project_user_collaborator'), 'project_collaborators', ['project_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('project_collaborators', 'added_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('project_collaborators', 'role',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('project_collaborators', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('project_collaborators', 'project_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.add_column('git_branches', sa.Column('conflict_files', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('code_quality_score', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('merge_time_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('assigned_agent_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('merge_commit_hash', sa.VARCHAR(length=40), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('review_comments', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('last_commit_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('agent_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('merge_target', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('parent_branch', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('development_time_hours', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('files_changed', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('is_protected', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('commits_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('branch_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('auto_delete_after_merge', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('build_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('merged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('reviewers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('test_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('conflict_resolution', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('branch_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('stale_after_days', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('has_conflicts', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('lines_removed', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('lines_added', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('commit_hash', sa.VARCHAR(length=40), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('merged_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('last_activity_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('approvals', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('git_branches', sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('git_branches', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'git_branches', type_='foreignkey')
    op.create_foreign_key(op.f('git_branches_task_id_fkey'), 'git_branches', 'tasks', ['task_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('git_branches_created_by_fkey'), 'git_branches', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('git_branches_project_id_fkey'), 'git_branches', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('git_branches_assigned_agent_id_fkey'), 'git_branches', 'agents', ['assigned_agent_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('git_branches_merged_by_fkey'), 'git_branches', 'users', ['merged_by'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_branch_task'), 'git_branches', ['task_id'], unique=False)
    op.create_index(op.f('idx_branch_project_name'), 'git_branches', ['project_id', 'branch_name'], unique=False)
    op.create_index(op.f('idx_branch_project_agent'), 'git_branches', ['project_id', 'assigned_agent_id'], unique=False)
    op.create_index(op.f('idx_branch_project'), 'git_branches', ['project_id'], unique=False)
    op.create_index(op.f('idx_branch_priority'), 'git_branches', ['priority'], unique=False)
    op.create_index(op.f('idx_branch_name'), 'git_branches', ['branch_name'], unique=False)
    op.create_index(op.f('idx_branch_merged'), 'git_branches', ['is_merged'], unique=False)
    op.create_index(op.f('idx_branch_last_activity'), 'git_branches', ['last_activity_at'], unique=False)
    op.create_index(op.f('idx_branch_created'), 'git_branches', ['created_at'], unique=False)
    op.create_index(op.f('idx_branch_agent'), 'git_branches', ['assigned_agent_id'], unique=False)
    op.create_index(op.f('idx_branch_active'), 'git_branches', ['is_active'], unique=False)
    op.drop_column('git_branches', 'name')
    op.add_column('cost_tracking', sa.Column('prompt_length', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('request_purpose', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('request_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('billing_period', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('throughput_tokens_per_second', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('billing_cycle_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('input_price_per_1k_tokens', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('latency_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('request_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('pricing_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('was_helpful', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('output_price_per_1k_tokens', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('input_tokens', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('total_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('model_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('request_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('context_window_used', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('billing_cycle_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('input_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('error_message', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('user_satisfaction', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('output_tokens', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('total_tokens', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('context_efficiency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('request_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('output_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('cost_tracking', sa.Column('response_length', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('cost_tracking', sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'cost_tracking', type_='foreignkey')
    op.create_foreign_key(op.f('cost_tracking_task_id_fkey'), 'cost_tracking', 'tasks', ['task_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('cost_tracking_project_id_fkey'), 'cost_tracking', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('cost_tracking_conversation_id_fkey'), 'cost_tracking', 'conversations', ['conversation_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('cost_tracking_agent_id_fkey'), 'cost_tracking', 'agents', ['agent_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('cost_tracking_user_id_fkey'), 'cost_tracking', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_cost_user_timestamp'), 'cost_tracking', ['user_id', 'request_timestamp'], unique=False)
    op.create_index(op.f('idx_cost_user_period'), 'cost_tracking', ['user_id', 'billing_period'], unique=False)
    op.create_index(op.f('idx_cost_total_cost'), 'cost_tracking', ['total_cost_usd'], unique=False)
    op.create_index(op.f('idx_cost_status'), 'cost_tracking', ['status'], unique=False)
    op.create_index(op.f('idx_cost_request_type'), 'cost_tracking', ['request_type'], unique=False)
    op.create_index(op.f('idx_cost_request_timestamp'), 'cost_tracking', ['request_timestamp'], unique=False)
    op.create_index(op.f('idx_cost_provider_model'), 'cost_tracking', ['model_provider', 'model_name'], unique=False)
    op.create_index(op.f('idx_cost_project_timestamp'), 'cost_tracking', ['project_id', 'request_timestamp'], unique=False)
    op.create_index(op.f('idx_cost_project_period'), 'cost_tracking', ['project_id', 'billing_period'], unique=False)
    op.create_index(op.f('idx_cost_billing_period'), 'cost_tracking', ['billing_period'], unique=False)
    op.create_index(op.f('idx_cost_agent_period'), 'cost_tracking', ['agent_id', 'billing_period'], unique=False)
    op.drop_column('cost_tracking', 'cost')
    op.add_column('conversations', sa.Column('last_message_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('total_tokens_used', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('total_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('summary_updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('agent_message_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('system_context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('message_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('archive_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('is_pinned', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('user_message_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('auto_summarize', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('is_archived', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('conversation_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.create_foreign_key(op.f('conversations_user_id_fkey'), 'conversations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('conversations_project_id_fkey'), 'conversations', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('conversations_agent_id_fkey'), 'conversations', 'agents', ['agent_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_conversation_project_user'), 'conversations', ['project_id', 'user_id'], unique=False)
    op.create_index(op.f('idx_conversation_last_message'), 'conversations', ['last_message_at'], unique=False)
    op.create_index(op.f('idx_conversation_created'), 'conversations', ['created_at'], unique=False)
    op.create_index(op.f('idx_conversation_agent'), 'conversations', ['agent_id'], unique=False)
    op.create_index(op.f('idx_conversation_active'), 'conversations', ['is_active'], unique=False)
    op.drop_column('conversations', 'agent_response')
    op.drop_column('conversations', 'user_message')
    op.add_column('containers', sa.Column('memory_usage_mb', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('health_check_failures', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('network_in_mb', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('external_port', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('allowed_users', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('access_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('startup_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('auto_stop_hours', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('swap_limit', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('volumes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('disk_limit', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('cpu_limit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('internal_port', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('install_command', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('memory_limit', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('preview_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('last_health_check', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('network_out_mb', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('auto_delete_days', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('environment_vars', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('restart_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('auto_sleep_minutes', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('container_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('logs_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('start_command', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('image_tag', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('last_error', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('health_check_command', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('container_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('sleep_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('cpu_usage_percent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('deployment_target', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('build_command', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('last_active_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('registry_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('stopped_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('disk_usage_mb', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('workspace_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('error_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('image', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
    op.add_column('containers', sa.Column('ssh_port', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('containers', sa.Column('labels', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'containers', type_='foreignkey')
    op.create_foreign_key(op.f('containers_project_id_fkey'), 'containers', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_container_status'), 'containers', ['status'], unique=False)
    op.create_index(op.f('idx_container_project'), 'containers', ['project_id'], unique=False)
    op.create_index(op.f('idx_container_last_active'), 'containers', ['last_active_at'], unique=False)
    op.create_index(op.f('idx_container_external_port'), 'containers', ['external_port'], unique=False)
    op.create_index(op.f('idx_container_created'), 'containers', ['created_at'], unique=False)
    op.create_unique_constraint(op.f('containers_container_name_key'), 'containers', ['container_name'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('containers_container_id_key'), 'containers', ['container_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('containers', 'container_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.add_column('audit_logs', sa.Column('resource_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('service_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('resource_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('endpoint', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('sensitivity_level', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('environment', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('resource_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('permission_level', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('was_authorized', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('risk_score', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('referer', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('changed_fields', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('http_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('action_description', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('correlation_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('action_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('data_classification', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('service_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('compliance_tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('request_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('additional_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('authentication_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('user_agent', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.create_foreign_key(op.f('audit_logs_project_id_fkey'), 'audit_logs', 'projects', ['project_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('audit_logs_user_id_fkey'), 'audit_logs', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_audit_user_action'), 'audit_logs', ['user_id', 'action'], unique=False)
    op.create_index(op.f('idx_audit_timestamp'), 'audit_logs', ['action_timestamp'], unique=False)
    op.create_index(op.f('idx_audit_status'), 'audit_logs', ['status'], unique=False)
    op.create_index(op.f('idx_audit_session'), 'audit_logs', ['session_id'], unique=False)
    op.create_index(op.f('idx_audit_sensitivity'), 'audit_logs', ['sensitivity_level'], unique=False)
    op.create_index(op.f('idx_audit_risk_score'), 'audit_logs', ['risk_score'], unique=False)
    op.create_index(op.f('idx_audit_resource'), 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('idx_audit_project_action'), 'audit_logs', ['project_id', 'action'], unique=False)
    op.create_index(op.f('idx_audit_ip_address'), 'audit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('idx_audit_environment'), 'audit_logs', ['environment'], unique=False)
    op.create_index(op.f('idx_audit_correlation'), 'audit_logs', ['correlation_id'], unique=False)
    op.create_index(op.f('idx_audit_compliance'), 'audit_logs', ['compliance_tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_audit_action_timestamp'), 'audit_logs', ['action', 'action_timestamp'], unique=False)
    op.alter_column('audit_logs', 'action',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('audit_logs', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('audit_logs', 'details')
    op.create_index(op.f('idx_agent_type'), 'agents', ['agent_type'], unique=False)
    op.create_index(op.f('idx_agent_specializations'), 'agents', ['specializations'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_agent_provider'), 'agents', ['provider'], unique=False)
    op.create_index(op.f('idx_agent_current_load'), 'agents', ['current_load'], unique=False)
    op.create_index(op.f('idx_agent_capabilities'), 'agents', ['capabilities'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_agent_active_available'), 'agents', ['is_active', 'is_available'], unique=False)
    op.alter_column('agents', 'tags',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False)
    op.alter_column('agents', 'file_types_handled',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False)
    op.alter_column('agents', 'tools_available',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False)
    op.alter_column('agents', 'specializations',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False)
    op.alter_column('agents', 'fallback_models',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False)
    op.alter_column('agents', 'capabilities',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False)
    op.add_column('agent_messages', sa.Column('cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('requires_response', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('edited_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('message_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('output_tokens', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('total_tokens', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('parent_message_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('provider_used', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('model_used', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('user_rating', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('input_tokens', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('edit_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('thread_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('is_internal', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('target_agent', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('agent_messages', sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('is_helpful', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('user_feedback', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('agent_messages', sa.Column('is_edited', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'agent_messages', type_='foreignkey')
    op.create_foreign_key(op.f('agent_messages_parent_message_id_fkey'), 'agent_messages', 'agent_messages', ['parent_message_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('agent_messages_agent_id_fkey'), 'agent_messages', 'agents', ['agent_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('agent_messages_task_id_fkey'), 'agent_messages', 'tasks', ['task_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('agent_messages_conversation_id_fkey'), 'agent_messages', 'conversations', ['conversation_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_message_type'), 'agent_messages', ['message_type'], unique=False)
    op.create_index(op.f('idx_message_thread'), 'agent_messages', ['thread_id'], unique=False)
    op.create_index(op.f('idx_message_task'), 'agent_messages', ['task_id'], unique=False)
    op.create_index(op.f('idx_message_role'), 'agent_messages', ['role'], unique=False)
    op.create_index(op.f('idx_message_parent'), 'agent_messages', ['parent_message_id'], unique=False)
    op.create_index(op.f('idx_message_conversation_created'), 'agent_messages', ['conversation_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_message_agent'), 'agent_messages', ['agent_id'], unique=False)
    # ### end Alembic commands ###
