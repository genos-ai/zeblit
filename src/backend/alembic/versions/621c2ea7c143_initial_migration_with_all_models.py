"""Initial migration with all models

Revision ID: 621c2ea7c143
Revises: 
Create Date: 2025-07-04 16:55:59.361768

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '621c2ea7c143'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agents',
    sa.Column('agent_type', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('system_prompt', sa.Text(), nullable=False),
    sa.Column('capabilities', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('default_model', sa.String(length=100), nullable=False),
    sa.Column('fallback_models', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('max_tokens', sa.Integer(), nullable=False),
    sa.Column('top_p', sa.Float(), nullable=False),
    sa.Column('frequency_penalty', sa.Float(), nullable=False),
    sa.Column('presence_penalty', sa.Float(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False),
    sa.Column('parallel_task_limit', sa.Integer(), nullable=False),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('can_create_subtasks', sa.Boolean(), nullable=False),
    sa.Column('can_modify_files', sa.Boolean(), nullable=False),
    sa.Column('can_execute_code', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('current_load', sa.Integer(), nullable=False),
    sa.Column('max_concurrent_tasks', sa.Integer(), nullable=False),
    sa.Column('total_tasks_completed', sa.Integer(), nullable=False),
    sa.Column('total_tasks_failed', sa.Integer(), nullable=False),
    sa.Column('average_completion_time_minutes', sa.Float(), nullable=True),
    sa.Column('success_rate_percentage', sa.Float(), nullable=False),
    sa.Column('total_tokens_used', sa.Integer(), nullable=False),
    sa.Column('total_cost_usd', sa.Float(), nullable=False),
    sa.Column('average_cost_per_task', sa.Float(), nullable=True),
    sa.Column('specializations', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('tools_available', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('file_types_handled', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('communication_style', sa.String(length=50), nullable=False),
    sa.Column('explanation_level', sa.String(length=50), nullable=False),
    sa.Column('code_commenting_style', sa.String(length=50), nullable=False),
    sa.Column('context_window_size', sa.Integer(), nullable=False),
    sa.Column('memory_enabled', sa.Boolean(), nullable=False),
    sa.Column('learning_enabled', sa.Boolean(), nullable=False),
    sa.Column('custom_instructions', sa.Text(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('agent_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.Column('last_performance_review', sa.DateTime(), nullable=True),
    sa.Column('next_scheduled_update', sa.DateTime(), nullable=True),
    sa.Column('user_satisfaction_score', sa.Float(), nullable=True),
    sa.Column('feedback_count', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('agent_type')
    )
    op.create_index('idx_agent_active_available', 'agents', ['is_active', 'is_available'], unique=False)
    op.create_index('idx_agent_capabilities', 'agents', ['capabilities'], unique=False, postgresql_using='gin')
    op.create_index('idx_agent_current_load', 'agents', ['current_load'], unique=False)
    op.create_index('idx_agent_provider', 'agents', ['provider'], unique=False)
    op.create_index('idx_agent_specializations', 'agents', ['specializations'], unique=False, postgresql_using='gin')
    op.create_index('idx_agent_type', 'agents', ['agent_type'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('email_verification_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_expires', sa.DateTime(), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('monthly_token_limit', sa.Integer(), nullable=False),
    sa.Column('monthly_cost_limit', sa.Float(), nullable=False),
    sa.Column('current_month_tokens', sa.Integer(), nullable=False),
    sa.Column('current_month_cost', sa.Float(), nullable=False),
    sa.Column('last_token_reset', sa.DateTime(), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.String(length=500), nullable=True),
    sa.Column('company', sa.String(length=200), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('website_url', sa.String(length=500), nullable=True),
    sa.Column('github_username', sa.String(length=100), nullable=True),
    sa.Column('is_suspended', sa.Boolean(), nullable=False),
    sa.Column('suspension_reason', sa.String(length=500), nullable=True),
    sa.Column('suspended_until', sa.DateTime(), nullable=True),
    sa.Column('terms_accepted', sa.Boolean(), nullable=False),
    sa.Column('terms_accepted_at', sa.DateTime(), nullable=True),
    sa.Column('privacy_policy_accepted', sa.Boolean(), nullable=False),
    sa.Column('privacy_policy_accepted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_index('idx_user_created', 'users', ['created_at'], unique=False)
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_user_role', 'users', ['role'], unique=False)
    op.create_index('idx_user_username_active', 'users', ['username', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('project_templates',
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('template_type', sa.String(length=100), nullable=False),
    sa.Column('framework', sa.String(length=100), nullable=False),
    sa.Column('language', sa.String(length=50), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_featured', sa.Boolean(), nullable=False),
    sa.Column('is_official', sa.Boolean(), nullable=False),
    sa.Column('is_deprecated', sa.Boolean(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('success_rate', sa.Float(), nullable=False),
    sa.Column('average_setup_time_minutes', sa.Integer(), nullable=True),
    sa.Column('user_rating', sa.Float(), nullable=False),
    sa.Column('rating_count', sa.Integer(), nullable=False),
    sa.Column('difficulty_level', sa.String(length=50), nullable=False),
    sa.Column('estimated_setup_time', sa.Integer(), nullable=False),
    sa.Column('prerequisites', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('framework_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dev_dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('environment_vars', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('build_command', sa.String(length=500), nullable=True),
    sa.Column('start_command', sa.String(length=500), nullable=True),
    sa.Column('install_command', sa.String(length=500), nullable=True),
    sa.Column('test_command', sa.String(length=500), nullable=True),
    sa.Column('file_structure', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('starter_files', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('container_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('docker_image', sa.String(length=255), nullable=True),
    sa.Column('cpu_requirements', sa.String(length=20), nullable=False),
    sa.Column('memory_requirements', sa.String(length=20), nullable=False),
    sa.Column('documentation_url', sa.String(length=500), nullable=True),
    sa.Column('github_url', sa.String(length=500), nullable=True),
    sa.Column('demo_url', sa.String(length=500), nullable=True),
    sa.Column('tutorial_url', sa.String(length=500), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('included_libraries', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('template_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('template_version', sa.String(length=50), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.Column('changelog', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('ai_optimized', sa.Boolean(), nullable=False),
    sa.Column('recommended_agents', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('agent_configurations', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('load_time_ms', sa.Integer(), nullable=True),
    sa.Column('bundle_size_kb', sa.Integer(), nullable=True),
    sa.Column('lighthouse_score', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('idx_template_active', 'project_templates', ['is_active'], unique=False)
    op.create_index('idx_template_category', 'project_templates', ['category'], unique=False)
    op.create_index('idx_template_created', 'project_templates', ['created_at'], unique=False)
    op.create_index('idx_template_difficulty', 'project_templates', ['difficulty_level'], unique=False)
    op.create_index('idx_template_featured', 'project_templates', ['is_featured'], unique=False)
    op.create_index('idx_template_features', 'project_templates', ['features'], unique=False, postgresql_using='gin')
    op.create_index('idx_template_framework', 'project_templates', ['framework'], unique=False)
    op.create_index('idx_template_language', 'project_templates', ['language'], unique=False)
    op.create_index('idx_template_rating', 'project_templates', ['user_rating'], unique=False)
    op.create_index('idx_template_tags', 'project_templates', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_template_updated', 'project_templates', ['last_updated'], unique=False)
    op.create_index('idx_template_usage', 'project_templates', ['usage_count'], unique=False)
    op.create_table('projects',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('template_type', sa.String(length=100), nullable=True),
    sa.Column('framework', sa.String(length=100), nullable=True),
    sa.Column('language', sa.String(length=50), nullable=True),
    sa.Column('framework_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('environment_vars', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_template', sa.Boolean(), nullable=False),
    sa.Column('git_repo_url', sa.String(length=500), nullable=True),
    sa.Column('git_provider', sa.String(length=50), nullable=True),
    sa.Column('default_branch', sa.String(length=100), nullable=False),
    sa.Column('auto_commit', sa.Boolean(), nullable=False),
    sa.Column('auto_deploy', sa.Boolean(), nullable=False),
    sa.Column('container_id', sa.String(length=255), nullable=True),
    sa.Column('preview_url', sa.String(length=500), nullable=True),
    sa.Column('deployment_url', sa.String(length=500), nullable=True),
    sa.Column('build_command', sa.String(length=500), nullable=True),
    sa.Column('start_command', sa.String(length=500), nullable=True),
    sa.Column('install_command', sa.String(length=500), nullable=True),
    sa.Column('cpu_limit', sa.String(length=20), nullable=False),
    sa.Column('memory_limit', sa.String(length=20), nullable=False),
    sa.Column('storage_limit', sa.String(length=20), nullable=False),
    sa.Column('last_accessed', sa.DateTime(), nullable=False),
    sa.Column('last_deployed', sa.DateTime(), nullable=True),
    sa.Column('total_builds', sa.Integer(), nullable=False),
    sa.Column('total_deployments', sa.Integer(), nullable=False),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('archived_by_id', sa.UUID(), nullable=True),
    sa.Column('archive_reason', sa.String(length=500), nullable=True),
    sa.Column('file_count', sa.Integer(), nullable=False),
    sa.Column('total_lines_of_code', sa.Integer(), nullable=False),
    sa.Column('ai_generated_lines', sa.Integer(), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('project_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['archived_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('container_id')
    )
    op.create_index('idx_project_container', 'projects', ['container_id'], unique=False)
    op.create_index('idx_project_created', 'projects', ['created_at'], unique=False)
    op.create_index('idx_project_last_accessed', 'projects', ['last_accessed'], unique=False)
    op.create_index('idx_project_name', 'projects', ['name'], unique=False)
    op.create_index('idx_project_owner_status', 'projects', ['owner_id', 'status'], unique=False)
    op.create_index('idx_project_public', 'projects', ['is_public'], unique=False)
    op.create_index('idx_project_template_type', 'projects', ['template_type'], unique=False)
    op.create_table('audit_logs',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('action_description', sa.String(length=500), nullable=True),
    sa.Column('resource_type', sa.String(length=100), nullable=True),
    sa.Column('resource_id', sa.String(length=100), nullable=True),
    sa.Column('resource_name', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=100), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('correlation_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(length=1000), nullable=True),
    sa.Column('referer', sa.String(length=1000), nullable=True),
    sa.Column('endpoint', sa.String(length=500), nullable=True),
    sa.Column('http_method', sa.String(length=10), nullable=True),
    sa.Column('action_timestamp', sa.DateTime(), nullable=False),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('changed_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('authentication_method', sa.String(length=50), nullable=True),
    sa.Column('permission_level', sa.String(length=50), nullable=True),
    sa.Column('was_authorized', sa.Boolean(), nullable=False),
    sa.Column('risk_score', sa.Integer(), nullable=False),
    sa.Column('service_name', sa.String(length=100), nullable=True),
    sa.Column('service_version', sa.String(length=50), nullable=True),
    sa.Column('environment', sa.String(length=50), nullable=True),
    sa.Column('compliance_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('sensitivity_level', sa.String(length=50), nullable=False),
    sa.Column('data_classification', sa.String(length=50), nullable=True),
    sa.Column('additional_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_action_timestamp', 'audit_logs', ['action', 'action_timestamp'], unique=False)
    op.create_index('idx_audit_compliance', 'audit_logs', ['compliance_tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_audit_correlation', 'audit_logs', ['correlation_id'], unique=False)
    op.create_index('idx_audit_environment', 'audit_logs', ['environment'], unique=False)
    op.create_index('idx_audit_ip_address', 'audit_logs', ['ip_address'], unique=False)
    op.create_index('idx_audit_project_action', 'audit_logs', ['project_id', 'action'], unique=False)
    op.create_index('idx_audit_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_risk_score', 'audit_logs', ['risk_score'], unique=False)
    op.create_index('idx_audit_sensitivity', 'audit_logs', ['sensitivity_level'], unique=False)
    op.create_index('idx_audit_session', 'audit_logs', ['session_id'], unique=False)
    op.create_index('idx_audit_status', 'audit_logs', ['status'], unique=False)
    op.create_index('idx_audit_timestamp', 'audit_logs', ['action_timestamp'], unique=False)
    op.create_index('idx_audit_user_action', 'audit_logs', ['user_id', 'action'], unique=False)
    op.create_table('containers',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('container_id', sa.String(length=255), nullable=False),
    sa.Column('container_name', sa.String(length=255), nullable=True),
    sa.Column('image', sa.String(length=500), nullable=False),
    sa.Column('image_tag', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('cpu_limit', sa.Float(), nullable=False),
    sa.Column('memory_limit', sa.Integer(), nullable=False),
    sa.Column('disk_limit', sa.Integer(), nullable=False),
    sa.Column('swap_limit', sa.Integer(), nullable=False),
    sa.Column('internal_port', sa.Integer(), nullable=False),
    sa.Column('external_port', sa.Integer(), nullable=True),
    sa.Column('preview_url', sa.String(length=500), nullable=True),
    sa.Column('ssh_port', sa.Integer(), nullable=True),
    sa.Column('workspace_path', sa.String(length=500), nullable=False),
    sa.Column('volumes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('environment_vars', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('last_active_at', sa.DateTime(), nullable=False),
    sa.Column('sleep_at', sa.DateTime(), nullable=True),
    sa.Column('stopped_at', sa.DateTime(), nullable=True),
    sa.Column('auto_sleep_minutes', sa.Integer(), nullable=False),
    sa.Column('auto_stop_hours', sa.Integer(), nullable=False),
    sa.Column('auto_delete_days', sa.Integer(), nullable=False),
    sa.Column('cpu_usage_percent', sa.Float(), nullable=False),
    sa.Column('memory_usage_mb', sa.Integer(), nullable=False),
    sa.Column('disk_usage_mb', sa.Integer(), nullable=False),
    sa.Column('network_in_mb', sa.Float(), nullable=False),
    sa.Column('network_out_mb', sa.Float(), nullable=False),
    sa.Column('startup_time_seconds', sa.Integer(), nullable=True),
    sa.Column('last_health_check', sa.DateTime(), nullable=True),
    sa.Column('health_check_failures', sa.Integer(), nullable=False),
    sa.Column('restart_count', sa.Integer(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('access_token', sa.String(length=255), nullable=True),
    sa.Column('allowed_users', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('build_command', sa.String(length=1000), nullable=True),
    sa.Column('start_command', sa.String(length=1000), nullable=True),
    sa.Column('install_command', sa.String(length=1000), nullable=True),
    sa.Column('health_check_command', sa.String(length=1000), nullable=True),
    sa.Column('registry_url', sa.String(length=500), nullable=True),
    sa.Column('deployment_target', sa.String(length=100), nullable=True),
    sa.Column('container_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('labels', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_error', sa.String(length=1000), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=False),
    sa.Column('logs_url', sa.String(length=500), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('container_id'),
    sa.UniqueConstraint('container_name')
    )
    op.create_index('idx_container_created', 'containers', ['created_at'], unique=False)
    op.create_index('idx_container_external_port', 'containers', ['external_port'], unique=False)
    op.create_index('idx_container_last_active', 'containers', ['last_active_at'], unique=False)
    op.create_index('idx_container_project', 'containers', ['project_id'], unique=False)
    op.create_index('idx_container_status', 'containers', ['status'], unique=False)
    op.create_table('conversations',
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=True),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('system_context', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('is_pinned', sa.Boolean(), nullable=False),
    sa.Column('last_message_at', sa.DateTime(), nullable=False),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.Column('user_message_count', sa.Integer(), nullable=False),
    sa.Column('agent_message_count', sa.Integer(), nullable=False),
    sa.Column('total_tokens_used', sa.Integer(), nullable=False),
    sa.Column('total_cost_usd', sa.Float(), nullable=False),
    sa.Column('auto_summarize', sa.Boolean(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('summary_updated_at', sa.DateTime(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('conversation_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('archive_reason', sa.String(length=255), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_conversation_active', 'conversations', ['is_active'], unique=False)
    op.create_index('idx_conversation_agent', 'conversations', ['agent_id'], unique=False)
    op.create_index('idx_conversation_created', 'conversations', ['created_at'], unique=False)
    op.create_index('idx_conversation_last_message', 'conversations', ['last_message_at'], unique=False)
    op.create_index('idx_conversation_project_user', 'conversations', ['project_id', 'user_id'], unique=False)
    op.create_table('project_collaborators',
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.Column('added_by_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['added_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('project_id', 'user_id', name='uq_project_user_collaborator')
    )
    op.create_table('project_files',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('file_path', sa.String(length=1000), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('file_extension', sa.String(length=50), nullable=True),
    sa.Column('file_type', sa.String(length=50), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('content_hash', sa.String(length=64), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('is_binary', sa.Boolean(), nullable=False),
    sa.Column('encoding', sa.String(length=50), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_latest', sa.Boolean(), nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('is_ignored', sa.Boolean(), nullable=False),
    sa.Column('is_generated', sa.Boolean(), nullable=False),
    sa.Column('is_readonly', sa.Boolean(), nullable=False),
    sa.Column('is_hidden', sa.Boolean(), nullable=False),
    sa.Column('git_status', sa.String(length=50), nullable=True),
    sa.Column('git_hash', sa.String(length=40), nullable=True),
    sa.Column('branch_name', sa.String(length=255), nullable=True),
    sa.Column('ai_analyzed', sa.Boolean(), nullable=False),
    sa.Column('ai_analysis_result', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('language_detected', sa.String(length=50), nullable=True),
    sa.Column('complexity_score', sa.Integer(), nullable=False),
    sa.Column('line_count', sa.Integer(), nullable=False),
    sa.Column('blank_line_count', sa.Integer(), nullable=False),
    sa.Column('comment_line_count', sa.Integer(), nullable=False),
    sa.Column('code_line_count', sa.Integer(), nullable=False),
    sa.Column('imports', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('exports', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('functions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('classes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('contains_secrets', sa.Boolean(), nullable=False),
    sa.Column('security_issues', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('syntax_errors', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('allowed_users', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_accessed_at', sa.DateTime(), nullable=True),
    sa.Column('last_modified_at', sa.DateTime(), nullable=False),
    sa.Column('file_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('open_count', sa.Integer(), nullable=False),
    sa.Column('edit_count', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['project_files.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_file_complexity', 'project_files', ['complexity_score'], unique=False)
    op.create_index('idx_file_created', 'project_files', ['created_at'], unique=False)
    op.create_index('idx_file_deleted', 'project_files', ['is_deleted'], unique=False)
    op.create_index('idx_file_git_status', 'project_files', ['git_status'], unique=False)
    op.create_index('idx_file_hash', 'project_files', ['content_hash'], unique=False)
    op.create_index('idx_file_latest', 'project_files', ['is_latest'], unique=False)
    op.create_index('idx_file_modified', 'project_files', ['last_modified_at'], unique=False)
    op.create_index('idx_file_path', 'project_files', ['file_path'], unique=False)
    op.create_index('idx_file_project', 'project_files', ['project_id'], unique=False)
    op.create_index('idx_file_project_path', 'project_files', ['project_id', 'file_path'], unique=False)
    op.create_index('idx_file_project_type', 'project_files', ['project_id', 'file_type'], unique=False)
    op.create_index('idx_file_type', 'project_files', ['file_type'], unique=False)
    op.create_table('tasks',
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('parent_task_id', sa.UUID(), nullable=True),
    sa.Column('task_type', sa.String(length=100), nullable=False),
    sa.Column('complexity', sa.String(length=50), nullable=False),
    sa.Column('priority', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('assigned_agents', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('primary_agent', sa.String(length=50), nullable=True),
    sa.Column('requires_human_review', sa.Boolean(), nullable=False),
    sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('acceptance_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('technical_specs', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dependencies', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('generated_files', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('modified_files', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('git_commits', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('estimated_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('execution_time_seconds', sa.Integer(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('last_error_at', sa.DateTime(), nullable=True),
    sa.Column('progress_percentage', sa.Integer(), nullable=False),
    sa.Column('current_step', sa.String(length=200), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('estimated_cost_usd', sa.Float(), nullable=True),
    sa.Column('actual_cost_usd', sa.Float(), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('external_references', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('task_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('human_feedback', sa.Text(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('approved_by_id', sa.UUID(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_assigned_agents', 'tasks', ['assigned_agents'], unique=False, postgresql_using='gin')
    op.create_index('idx_task_created', 'tasks', ['created_at'], unique=False)
    op.create_index('idx_task_parent', 'tasks', ['parent_task_id'], unique=False)
    op.create_index('idx_task_priority_status', 'tasks', ['priority', 'status'], unique=False)
    op.create_index('idx_task_project_status', 'tasks', ['project_id', 'status'], unique=False)
    op.create_index('idx_task_type_complexity', 'tasks', ['task_type', 'complexity'], unique=False)
    op.create_index('idx_task_user', 'tasks', ['user_id'], unique=False)
    op.create_table('agent_messages',
    sa.Column('conversation_id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=True),
    sa.Column('agent_id', sa.UUID(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('message_type', sa.String(length=50), nullable=False),
    sa.Column('parent_message_id', sa.UUID(), nullable=True),
    sa.Column('thread_id', sa.String(length=100), nullable=True),
    sa.Column('model_used', sa.String(length=100), nullable=True),
    sa.Column('provider_used', sa.String(length=50), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('cost_usd', sa.Float(), nullable=False),
    sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('target_agent', sa.String(length=50), nullable=True),
    sa.Column('requires_response', sa.Boolean(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=False),
    sa.Column('is_edited', sa.Boolean(), nullable=False),
    sa.Column('edited_at', sa.DateTime(), nullable=True),
    sa.Column('edit_count', sa.Integer(), nullable=False),
    sa.Column('user_rating', sa.Integer(), nullable=True),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('is_helpful', sa.Boolean(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_message_id'], ['agent_messages.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_message_agent', 'agent_messages', ['agent_id'], unique=False)
    op.create_index('idx_message_conversation_created', 'agent_messages', ['conversation_id', 'created_at'], unique=False)
    op.create_index('idx_message_parent', 'agent_messages', ['parent_message_id'], unique=False)
    op.create_index('idx_message_role', 'agent_messages', ['role'], unique=False)
    op.create_index('idx_message_task', 'agent_messages', ['task_id'], unique=False)
    op.create_index('idx_message_thread', 'agent_messages', ['thread_id'], unique=False)
    op.create_index('idx_message_type', 'agent_messages', ['message_type'], unique=False)
    op.create_table('cost_tracking',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('agent_id', sa.UUID(), nullable=True),
    sa.Column('task_id', sa.UUID(), nullable=True),
    sa.Column('conversation_id', sa.UUID(), nullable=True),
    sa.Column('request_id', sa.String(length=100), nullable=True),
    sa.Column('model_provider', sa.String(length=50), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('input_cost_usd', sa.Float(), nullable=False),
    sa.Column('output_cost_usd', sa.Float(), nullable=False),
    sa.Column('total_cost_usd', sa.Float(), nullable=False),
    sa.Column('input_price_per_1k_tokens', sa.Float(), nullable=True),
    sa.Column('output_price_per_1k_tokens', sa.Float(), nullable=True),
    sa.Column('request_type', sa.String(length=50), nullable=False),
    sa.Column('request_purpose', sa.String(length=100), nullable=True),
    sa.Column('prompt_length', sa.Integer(), nullable=True),
    sa.Column('response_length', sa.Integer(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('throughput_tokens_per_second', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.String(length=1000), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('user_satisfaction', sa.Float(), nullable=True),
    sa.Column('was_helpful', sa.Boolean(), nullable=True),
    sa.Column('context_window_used', sa.Integer(), nullable=True),
    sa.Column('context_efficiency', sa.Float(), nullable=True),
    sa.Column('billing_period', sa.String(length=20), nullable=False),
    sa.Column('billing_cycle_start', sa.DateTime(), nullable=True),
    sa.Column('billing_cycle_end', sa.DateTime(), nullable=True),
    sa.Column('request_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('pricing_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('request_timestamp', sa.DateTime(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_cost_agent_period', 'cost_tracking', ['agent_id', 'billing_period'], unique=False)
    op.create_index('idx_cost_billing_period', 'cost_tracking', ['billing_period'], unique=False)
    op.create_index('idx_cost_project_period', 'cost_tracking', ['project_id', 'billing_period'], unique=False)
    op.create_index('idx_cost_project_timestamp', 'cost_tracking', ['project_id', 'request_timestamp'], unique=False)
    op.create_index('idx_cost_provider_model', 'cost_tracking', ['model_provider', 'model_name'], unique=False)
    op.create_index('idx_cost_request_timestamp', 'cost_tracking', ['request_timestamp'], unique=False)
    op.create_index('idx_cost_request_type', 'cost_tracking', ['request_type'], unique=False)
    op.create_index('idx_cost_status', 'cost_tracking', ['status'], unique=False)
    op.create_index('idx_cost_total_cost', 'cost_tracking', ['total_cost_usd'], unique=False)
    op.create_index('idx_cost_user_period', 'cost_tracking', ['user_id', 'billing_period'], unique=False)
    op.create_index('idx_cost_user_timestamp', 'cost_tracking', ['user_id', 'request_timestamp'], unique=False)
    op.create_table('git_branches',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('assigned_agent_id', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('branch_name', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('commit_hash', sa.String(length=40), nullable=True),
    sa.Column('parent_branch', sa.String(length=255), nullable=False),
    sa.Column('merge_target', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_merged', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('is_protected', sa.Boolean(), nullable=False),
    sa.Column('agent_type', sa.String(length=50), nullable=True),
    sa.Column('task_id', sa.UUID(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('commits_count', sa.Integer(), nullable=False),
    sa.Column('files_changed', sa.Integer(), nullable=False),
    sa.Column('lines_added', sa.Integer(), nullable=False),
    sa.Column('lines_removed', sa.Integer(), nullable=False),
    sa.Column('merge_commit_hash', sa.String(length=40), nullable=True),
    sa.Column('merged_at', sa.DateTime(), nullable=True),
    sa.Column('merged_by', sa.UUID(), nullable=True),
    sa.Column('has_conflicts', sa.Boolean(), nullable=False),
    sa.Column('conflict_files', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('conflict_resolution', sa.Text(), nullable=True),
    sa.Column('build_status', sa.String(length=50), nullable=True),
    sa.Column('test_status', sa.String(length=50), nullable=True),
    sa.Column('code_quality_score', sa.Integer(), nullable=False),
    sa.Column('reviewers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('approvals', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('review_comments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_commit_at', sa.DateTime(), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(), nullable=False),
    sa.Column('branch_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('auto_delete_after_merge', sa.Boolean(), nullable=False),
    sa.Column('stale_after_days', sa.Integer(), nullable=False),
    sa.Column('merge_time_minutes', sa.Integer(), nullable=True),
    sa.Column('development_time_hours', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_agent_id'], ['agents.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['merged_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_branch_active', 'git_branches', ['is_active'], unique=False)
    op.create_index('idx_branch_agent', 'git_branches', ['assigned_agent_id'], unique=False)
    op.create_index('idx_branch_created', 'git_branches', ['created_at'], unique=False)
    op.create_index('idx_branch_last_activity', 'git_branches', ['last_activity_at'], unique=False)
    op.create_index('idx_branch_merged', 'git_branches', ['is_merged'], unique=False)
    op.create_index('idx_branch_name', 'git_branches', ['branch_name'], unique=False)
    op.create_index('idx_branch_priority', 'git_branches', ['priority'], unique=False)
    op.create_index('idx_branch_project', 'git_branches', ['project_id'], unique=False)
    op.create_index('idx_branch_project_agent', 'git_branches', ['project_id', 'assigned_agent_id'], unique=False)
    op.create_index('idx_branch_project_name', 'git_branches', ['project_id', 'branch_name'], unique=False)
    op.create_index('idx_branch_task', 'git_branches', ['task_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_branch_task', table_name='git_branches')
    op.drop_index('idx_branch_project_name', table_name='git_branches')
    op.drop_index('idx_branch_project_agent', table_name='git_branches')
    op.drop_index('idx_branch_project', table_name='git_branches')
    op.drop_index('idx_branch_priority', table_name='git_branches')
    op.drop_index('idx_branch_name', table_name='git_branches')
    op.drop_index('idx_branch_merged', table_name='git_branches')
    op.drop_index('idx_branch_last_activity', table_name='git_branches')
    op.drop_index('idx_branch_created', table_name='git_branches')
    op.drop_index('idx_branch_agent', table_name='git_branches')
    op.drop_index('idx_branch_active', table_name='git_branches')
    op.drop_table('git_branches')
    op.drop_index('idx_cost_user_timestamp', table_name='cost_tracking')
    op.drop_index('idx_cost_user_period', table_name='cost_tracking')
    op.drop_index('idx_cost_total_cost', table_name='cost_tracking')
    op.drop_index('idx_cost_status', table_name='cost_tracking')
    op.drop_index('idx_cost_request_type', table_name='cost_tracking')
    op.drop_index('idx_cost_request_timestamp', table_name='cost_tracking')
    op.drop_index('idx_cost_provider_model', table_name='cost_tracking')
    op.drop_index('idx_cost_project_timestamp', table_name='cost_tracking')
    op.drop_index('idx_cost_project_period', table_name='cost_tracking')
    op.drop_index('idx_cost_billing_period', table_name='cost_tracking')
    op.drop_index('idx_cost_agent_period', table_name='cost_tracking')
    op.drop_table('cost_tracking')
    op.drop_index('idx_message_type', table_name='agent_messages')
    op.drop_index('idx_message_thread', table_name='agent_messages')
    op.drop_index('idx_message_task', table_name='agent_messages')
    op.drop_index('idx_message_role', table_name='agent_messages')
    op.drop_index('idx_message_parent', table_name='agent_messages')
    op.drop_index('idx_message_conversation_created', table_name='agent_messages')
    op.drop_index('idx_message_agent', table_name='agent_messages')
    op.drop_table('agent_messages')
    op.drop_index('idx_task_user', table_name='tasks')
    op.drop_index('idx_task_type_complexity', table_name='tasks')
    op.drop_index('idx_task_project_status', table_name='tasks')
    op.drop_index('idx_task_priority_status', table_name='tasks')
    op.drop_index('idx_task_parent', table_name='tasks')
    op.drop_index('idx_task_created', table_name='tasks')
    op.drop_index('idx_task_assigned_agents', table_name='tasks', postgresql_using='gin')
    op.drop_table('tasks')
    op.drop_index('idx_file_type', table_name='project_files')
    op.drop_index('idx_file_project_type', table_name='project_files')
    op.drop_index('idx_file_project_path', table_name='project_files')
    op.drop_index('idx_file_project', table_name='project_files')
    op.drop_index('idx_file_path', table_name='project_files')
    op.drop_index('idx_file_modified', table_name='project_files')
    op.drop_index('idx_file_latest', table_name='project_files')
    op.drop_index('idx_file_hash', table_name='project_files')
    op.drop_index('idx_file_git_status', table_name='project_files')
    op.drop_index('idx_file_deleted', table_name='project_files')
    op.drop_index('idx_file_created', table_name='project_files')
    op.drop_index('idx_file_complexity', table_name='project_files')
    op.drop_table('project_files')
    op.drop_table('project_collaborators')
    op.drop_index('idx_conversation_project_user', table_name='conversations')
    op.drop_index('idx_conversation_last_message', table_name='conversations')
    op.drop_index('idx_conversation_created', table_name='conversations')
    op.drop_index('idx_conversation_agent', table_name='conversations')
    op.drop_index('idx_conversation_active', table_name='conversations')
    op.drop_table('conversations')
    op.drop_index('idx_container_status', table_name='containers')
    op.drop_index('idx_container_project', table_name='containers')
    op.drop_index('idx_container_last_active', table_name='containers')
    op.drop_index('idx_container_external_port', table_name='containers')
    op.drop_index('idx_container_created', table_name='containers')
    op.drop_table('containers')
    op.drop_index('idx_audit_user_action', table_name='audit_logs')
    op.drop_index('idx_audit_timestamp', table_name='audit_logs')
    op.drop_index('idx_audit_status', table_name='audit_logs')
    op.drop_index('idx_audit_session', table_name='audit_logs')
    op.drop_index('idx_audit_sensitivity', table_name='audit_logs')
    op.drop_index('idx_audit_risk_score', table_name='audit_logs')
    op.drop_index('idx_audit_resource', table_name='audit_logs')
    op.drop_index('idx_audit_project_action', table_name='audit_logs')
    op.drop_index('idx_audit_ip_address', table_name='audit_logs')
    op.drop_index('idx_audit_environment', table_name='audit_logs')
    op.drop_index('idx_audit_correlation', table_name='audit_logs')
    op.drop_index('idx_audit_compliance', table_name='audit_logs', postgresql_using='gin')
    op.drop_index('idx_audit_action_timestamp', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index('idx_project_template_type', table_name='projects')
    op.drop_index('idx_project_public', table_name='projects')
    op.drop_index('idx_project_owner_status', table_name='projects')
    op.drop_index('idx_project_name', table_name='projects')
    op.drop_index('idx_project_last_accessed', table_name='projects')
    op.drop_index('idx_project_created', table_name='projects')
    op.drop_index('idx_project_container', table_name='projects')
    op.drop_table('projects')
    op.drop_index('idx_template_usage', table_name='project_templates')
    op.drop_index('idx_template_updated', table_name='project_templates')
    op.drop_index('idx_template_tags', table_name='project_templates', postgresql_using='gin')
    op.drop_index('idx_template_rating', table_name='project_templates')
    op.drop_index('idx_template_language', table_name='project_templates')
    op.drop_index('idx_template_framework', table_name='project_templates')
    op.drop_index('idx_template_features', table_name='project_templates', postgresql_using='gin')
    op.drop_index('idx_template_featured', table_name='project_templates')
    op.drop_index('idx_template_difficulty', table_name='project_templates')
    op.drop_index('idx_template_created', table_name='project_templates')
    op.drop_index('idx_template_category', table_name='project_templates')
    op.drop_index('idx_template_active', table_name='project_templates')
    op.drop_table('project_templates')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_username_active', table_name='users')
    op.drop_index('idx_user_role', table_name='users')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_index('idx_user_created', table_name='users')
    op.drop_table('users')
    op.drop_index('idx_agent_type', table_name='agents')
    op.drop_index('idx_agent_specializations', table_name='agents', postgresql_using='gin')
    op.drop_index('idx_agent_provider', table_name='agents')
    op.drop_index('idx_agent_current_load', table_name='agents')
    op.drop_index('idx_agent_capabilities', table_name='agents', postgresql_using='gin')
    op.drop_index('idx_agent_active_available', table_name='agents')
    op.drop_table('agents')
    # ### end Alembic commands ###
